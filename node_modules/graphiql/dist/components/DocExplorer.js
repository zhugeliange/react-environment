/**
 *  Copyright (c) 2015, Facebook, Inc.
 *  All rights reserved.
 *
 *  This source code is licensed under the license found in the
 *  LICENSE-examples file in the root directory of this source tree.
 */

'use strict';

exports.__esModule = true;

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _marked = require('marked');

var _marked2 = _interopRequireDefault(_marked);

var _graphql = require('graphql');

/**
 * DocExplorer
 *
 * Shows documentations for GraphQL definitions from the schema.
 *
 * Props:
 *
 *   - schema: A required GraphQLSchema instance that provides GraphQL document
 *     definitions.
 *
 * Children:
 *
 *   - Any provided children will be positioned in the right-hand-side of the
 *     top bar. Typically this will be a "close" button for temporary explorer.
 *
 */

var DocExplorer = (function (_React$Component) {
  _inherits(DocExplorer, _React$Component);

  // Public API

  DocExplorer.prototype.showDoc = function showDoc(typeOrField) {
    var navStack = this.state.navStack;
    var isCurrentlyShown = navStack.length > 0 && navStack[navStack.length - 1] === typeOrField;
    if (!isCurrentlyShown) {
      navStack = navStack.concat([typeOrField]);
    }
    this.setState({ navStack: navStack });
  };

  _createClass(DocExplorer, null, [{
    key: 'propTypes',
    value: {
      schema: _react.PropTypes.instanceOf(_graphql.GraphQLSchema)
    },
    enumerable: true
  }]);

  function DocExplorer() {
    var _this = this;

    _classCallCheck(this, DocExplorer);

    _React$Component.call(this);

    this._onToggleBtnClick = function () {
      _this.setState({ expanded: !_this.state.expanded });
    };

    this._onNavBackClick = function () {
      _this.setState({
        navStack: _this.state.navStack.slice(0, -1),
        searchValue: null
      });
    };

    this._onClickTypeOrField = function (typeOrField) {
      _this.showDoc(typeOrField);
    };

    this._onSearch = function (event) {
      _this.setState({ searchValue: event.target.value });
    };

    this.state = {
      navStack: [],
      searchValue: null
    };
  }

  // Render Search Results

  DocExplorer.prototype.shouldComponentUpdate = function shouldComponentUpdate(nextProps, nextState) {
    return this.props.schema !== nextProps.schema || this.state.navStack !== nextState.navStack || this.state.searchValue !== nextState.searchValue;
  };

  DocExplorer.prototype.render = function render() {
    var _this2 = this;

    var schema = this.props.schema;
    var navStack = this.state.navStack;

    var typeOrField;
    if (navStack.length > 0) {
      typeOrField = navStack[navStack.length - 1];
    }

    var title;
    var content;
    if (typeOrField) {
      title = typeOrField.name;
      content = _graphql.isType(typeOrField) ? _react2['default'].createElement(TypeDoc, {
        key: typeOrField.name,
        type: typeOrField,
        onClickType: this._onClickTypeOrField,
        onClickField: this._onClickTypeOrField
      }) : _react2['default'].createElement(FieldDoc, {
        key: typeOrField.name,
        field: typeOrField,
        onClickType: this._onClickTypeOrField
      });
    } else if (this.state.searchValue) {
      title = 'Search Results';
      content = _react2['default'].createElement(SearchDoc, {
        searchValue: this.state.searchValue,
        schema: schema,
        onClickType: this._onClickTypeOrField,
        onClickField: this._onClickTypeOrField
      });
    } else if (schema) {
      title = 'Documentation Explorer';
      content = _react2['default'].createElement(SchemaDoc, {
        schema: schema,
        onClickType: this._onClickTypeOrField,
        onSearch: this._onSearch
      });
    }

    var prevName;
    if (navStack.length === 1) {
      prevName = 'Schema';
    } else if (navStack.length > 1) {
      prevName = navStack[navStack.length - 2].name;
    }

    var spinnerDiv = _react2['default'].createElement(
      'div',
      { className: 'spinner-container' },
      _react2['default'].createElement('div', { className: 'spinner' })
    );

    return _react2['default'].createElement(
      'div',
      { className: 'doc-explorer' },
      _react2['default'].createElement(
        'div',
        { className: 'doc-explorer-title-bar' },
        prevName && _react2['default'].createElement(
          'div',
          { className: 'doc-explorer-back', onClick: this._onNavBackClick },
          prevName
        ),
        _react2['default'].createElement(
          'div',
          { className: 'doc-explorer-title' },
          title
        ),
        _react2['default'].createElement(
          'div',
          { className: 'doc-explorer-rhs' },
          this.props.children
        )
      ),
      _react2['default'].createElement(
        'div',
        { className: 'doc-explorer-contents' },
        !typeOrField && _react2['default'].createElement(
          'label',
          { className: 'search-box-outer' },
          _react2['default'].createElement('input', { className: 'search-box-input',
            onKeyUp: function (event) {
              return _this2._onSearch(event);
            },
            type: 'text',
            placeholder: 'Search the schema ...' })
        ),
        this.props.schema ? content : spinnerDiv
      )
    );
  };

  return DocExplorer;
})(_react2['default'].Component);

exports.DocExplorer = DocExplorer;

var SearchDoc = (function (_React$Component2) {
  _inherits(SearchDoc, _React$Component2);

  function SearchDoc() {
    _classCallCheck(this, SearchDoc);

    _React$Component2.apply(this, arguments);
  }

  // Render the top level Schema

  SearchDoc.prototype.shouldComponentUpdate = function shouldComponentUpdate(nextProps) {
    return this.props.schema !== nextProps.schema || this.props.searchValue !== nextProps.searchValue;
  };

  SearchDoc.prototype.render = function render() {
    var searchValue = this.props.searchValue;
    var schema = this.props.schema;
    var onClickType = this.props.onClickType;
    var onClickField = this.props.onClickField;

    var typeMap = schema.getTypeMap();

    var matchedTypes = [];
    var matchedFields = [];

    Object.keys(typeMap).forEach(function (typeName) {
      var type = typeMap[typeName];
      var matchedOn = [];
      if (typeName.indexOf(searchValue) !== -1) {
        matchedOn.push('Type Name');
      }

      if (matchedOn.length) {
        matchedTypes.push(_react2['default'].createElement(
          'div',
          { className: 'doc-category-item' },
          _react2['default'].createElement(TypeLink, { type: type, onClick: onClickType })
        ));
      }

      if (type.getFields) {
        (function () {
          var fields = type.getFields();
          Object.keys(fields).forEach(function (fieldName) {
            var field = fields[fieldName];
            if (fieldName.indexOf(searchValue) !== -1) {
              matchedFields.push(_react2['default'].createElement(
                'div',
                { className: 'doc-category-item' },
                _react2['default'].createElement(
                  'a',
                  { className: 'field-name',
                    onClick: function (event) {
                      return onClickField(field, type, event);
                    } },
                  field.name
                ),
                ' on ',
                _react2['default'].createElement(TypeLink, { type: type, onClick: onClickType })
              ));
            } else if (field.args && field.args.length) {
              var matches = field.args.filter(function (arg) {
                return arg.name.indexOf(searchValue) !== -1;
              });
              if (matches.length > 0) {
                matchedFields.push(_react2['default'].createElement(
                  'div',
                  { className: 'doc-category-item' },
                  _react2['default'].createElement(
                    'a',
                    { className: 'field-name',
                      onClick: function (event) {
                        return onClickField(field, type, event);
                      } },
                    field.name
                  ),
                  '(',
                  _react2['default'].createElement(
                    'span',
                    null,
                    matches.map(function (arg) {
                      return _react2['default'].createElement(
                        'span',
                        { className: 'arg', key: arg.name },
                        _react2['default'].createElement(
                          'span',
                          { className: 'arg-name' },
                          arg.name
                        ),
                        ': ',
                        _react2['default'].createElement(TypeLink, { type: arg.type, onClick: onClickType })
                      );
                    })
                  ),
                  ')',
                  ' on ',
                  _react2['default'].createElement(TypeLink, { type: type, onClick: onClickType })
                ));
              }
            }
          });
        })();
      }
    });

    if (matchedTypes.length === 0 && matchedFields.length === 0) {
      return _react2['default'].createElement(
        'span',
        { className: 'doc-alert-text' },
        'No results found.'
      );
    }

    return _react2['default'].createElement(
      'div',
      null,
      _react2['default'].createElement(
        'div',
        { className: 'doc-category' },
        (matchedTypes.length > 0 || matchedFields.length > 0) && _react2['default'].createElement(
          'div',
          { className: 'doc-category-title' },
          'search results'
        ),
        matchedTypes,
        matchedFields
      )
    );
  };

  return SearchDoc;
})(_react2['default'].Component);

var SchemaDoc = (function (_React$Component3) {
  _inherits(SchemaDoc, _React$Component3);

  function SchemaDoc() {
    _classCallCheck(this, SchemaDoc);

    _React$Component3.apply(this, arguments);
  }

  // Documentation for a Type

  SchemaDoc.prototype.shouldComponentUpdate = function shouldComponentUpdate(nextProps) {
    return this.props.schema !== nextProps.schema;
  };

  SchemaDoc.prototype.render = function render() {
    var schema = this.props.schema;
    var queryType = schema.getQueryType();
    var mutationType = schema.getMutationType && schema.getMutationType();
    var subscriptionType = schema.getSubscriptionType && schema.getSubscriptionType();

    return _react2['default'].createElement(
      'div',
      null,
      _react2['default'].createElement(Description, {
        className: 'doc-type-description',
        markdown: 'A GraphQL schema provides a root type for each kind of operation.'
      }),
      _react2['default'].createElement(
        'div',
        { className: 'doc-category' },
        _react2['default'].createElement(
          'div',
          { className: 'doc-category-title' },
          'root types'
        ),
        _react2['default'].createElement(
          'div',
          { className: 'doc-category-item' },
          _react2['default'].createElement(
            'span',
            { className: 'keyword' },
            'query'
          ),
          ': ',
          _react2['default'].createElement(TypeLink, { type: queryType, onClick: this.props.onClickType })
        ),
        mutationType && _react2['default'].createElement(
          'div',
          { className: 'doc-category-item' },
          _react2['default'].createElement(
            'span',
            { className: 'keyword' },
            'mutation'
          ),
          ': ',
          _react2['default'].createElement(TypeLink, { type: mutationType, onClick: this.props.onClickType })
        ),
        subscriptionType && _react2['default'].createElement(
          'div',
          { className: 'doc-category-item' },
          _react2['default'].createElement(
            'span',
            { className: 'keyword' },
            'subscription'
          ),
          ': ',
          _react2['default'].createElement(TypeLink, {
            type: subscriptionType,
            onClick: this.props.onClickType
          })
        )
      )
    );
  };

  return SchemaDoc;
})(_react2['default'].Component);

var TypeDoc = (function (_React$Component4) {
  _inherits(TypeDoc, _React$Component4);

  function TypeDoc() {
    _classCallCheck(this, TypeDoc);

    _React$Component4.apply(this, arguments);
  }

  // Documentation for a field

  TypeDoc.prototype.shouldComponentUpdate = function shouldComponentUpdate(nextProps) {
    return this.props.type !== nextProps.type;
  };

  TypeDoc.prototype.render = function render() {
    var type = this.props.type;
    var onClickType = this.props.onClickType || function () {};
    var onClickField = this.props.onClickField || function () {};

    var typesTitle;
    var types;
    if (type instanceof _graphql.GraphQLUnionType) {
      typesTitle = 'possible types';
      types = type.getPossibleTypes();
    } else if (type instanceof _graphql.GraphQLInterfaceType) {
      typesTitle = 'implementations';
      types = type.getPossibleTypes();
    } else if (type instanceof _graphql.GraphQLObjectType) {
      typesTitle = 'implements';
      types = type.getInterfaces();
    }

    var typesDef;
    if (types && types.length > 0) {
      typesDef = _react2['default'].createElement(
        'div',
        { className: 'doc-category' },
        _react2['default'].createElement(
          'div',
          { className: 'doc-category-title' },
          typesTitle
        ),
        types.map(function (subtype) {
          return _react2['default'].createElement(
            'div',
            { key: subtype.name, className: 'doc-category-item' },
            _react2['default'].createElement(TypeLink, { type: subtype, onClick: onClickType })
          );
        })
      );
    }

    // InputObject and Object
    var fieldsDef;
    if (type.getFields) {
      var fieldMap = type.getFields();
      var fields = Object.keys(fieldMap).map(function (name) {
        return fieldMap[name];
      });
      fieldsDef = _react2['default'].createElement(
        'div',
        { className: 'doc-category' },
        _react2['default'].createElement(
          'div',
          { className: 'doc-category-title' },
          'fields'
        ),
        fields.map(function (field) {

          // Field arguments
          var argsDef;
          if (field.args && field.args.length > 0) {
            argsDef = field.args.map(function (arg) {
              return _react2['default'].createElement(
                'span',
                { className: 'arg', key: arg.name },
                _react2['default'].createElement(
                  'span',
                  { className: 'arg-name' },
                  arg.name
                ),
                ': ',
                _react2['default'].createElement(TypeLink, { type: arg.type, onClick: onClickType })
              );
            });
          }

          return _react2['default'].createElement(
            'div',
            { key: field.name, className: 'doc-category-item' },
            _react2['default'].createElement(
              'a',
              {
                className: 'field-name',
                onClick: function (event) {
                  return onClickField(field, type, event);
                } },
              field.name
            ),
            argsDef && ['(', _react2['default'].createElement(
              'span',
              null,
              argsDef
            ), ')'],
            ': ',
            _react2['default'].createElement(TypeLink, { type: field.type, onClick: onClickType })
          );
        })
      );
    }

    var valuesDef;
    if (type instanceof _graphql.GraphQLEnumType) {
      valuesDef = _react2['default'].createElement(
        'div',
        { className: 'doc-category' },
        _react2['default'].createElement(
          'div',
          { className: 'doc-category-title' },
          'values'
        ),
        type.getValues().map(function (value) {
          return _react2['default'].createElement(
            'div',
            { key: value.name, className: 'doc-category-item' },
            _react2['default'].createElement(
              'div',
              { className: 'enum-value' },
              value.name
            ),
            _react2['default'].createElement(Description, {
              className: 'doc-value-description',
              markdown: value.description
            })
          );
        })
      );
    }

    return _react2['default'].createElement(
      'div',
      null,
      _react2['default'].createElement(Description, {
        className: 'doc-type-description',
        markdown: type.description || 'No Description'
      }),
      type instanceof _graphql.GraphQLObjectType && typesDef,
      fieldsDef,
      valuesDef,
      !(type instanceof _graphql.GraphQLObjectType) && typesDef
    );
  };

  return TypeDoc;
})(_react2['default'].Component);

var FieldDoc = (function (_React$Component5) {
  _inherits(FieldDoc, _React$Component5);

  function FieldDoc() {
    _classCallCheck(this, FieldDoc);

    _React$Component5.apply(this, arguments);
  }

  // Renders a type link

  FieldDoc.prototype.shouldComponentUpdate = function shouldComponentUpdate(nextProps) {
    return this.props.field !== nextProps.field;
  };

  FieldDoc.prototype.render = function render() {
    var _this3 = this;

    var field = this.props.field;

    var argsDef;
    if (field.args && field.args.length > 0) {
      argsDef = _react2['default'].createElement(
        'div',
        { className: 'doc-category' },
        _react2['default'].createElement(
          'div',
          { className: 'doc-category-title' },
          'arguments'
        ),
        field.args.map(function (arg) {
          return _react2['default'].createElement(
            'div',
            { key: arg.name, className: 'doc-category-item' },
            _react2['default'].createElement(
              'div',
              null,
              _react2['default'].createElement(
                'span',
                { className: 'arg-name' },
                arg.name
              ),
              ': ',
              _react2['default'].createElement(TypeLink, { type: arg.type, onClick: _this3.props.onClickType })
            ),
            _react2['default'].createElement(Description, {
              className: 'doc-value-description',
              markdown: arg.description
            })
          );
        })
      );
    }

    return _react2['default'].createElement(
      'div',
      null,
      _react2['default'].createElement(Description, {
        className: 'doc-type-description',
        markdown: field.description || 'No Description'
      }),
      _react2['default'].createElement(
        'div',
        { className: 'doc-category' },
        _react2['default'].createElement(
          'div',
          { className: 'doc-category-title' },
          'type'
        ),
        _react2['default'].createElement(TypeLink, { type: field.type, onClick: this.props.onClickType })
      ),
      argsDef
    );
  };

  return FieldDoc;
})(_react2['default'].Component);

var TypeLink = (function (_React$Component6) {
  _inherits(TypeLink, _React$Component6);

  function TypeLink() {
    _classCallCheck(this, TypeLink);

    _React$Component6.apply(this, arguments);
  }

  TypeLink.prototype.shouldComponentUpdate = function shouldComponentUpdate(nextProps) {
    return this.props.type !== nextProps.type;
  };

  TypeLink.prototype.render = function render() {
    return renderType(this.props.type, this.props.onClick);
  };

  return TypeLink;
})(_react2['default'].Component);

function renderType(type, onClick) {
  if (type instanceof _graphql.GraphQLNonNull) {
    return _react2['default'].createElement(
      'span',
      null,
      renderType(type.ofType, onClick),
      '!'
    );
  }
  if (type instanceof _graphql.GraphQLList) {
    return _react2['default'].createElement(
      'span',
      null,
      '[',
      renderType(type.ofType, onClick),
      ']'
    );
  }
  return _react2['default'].createElement(
    'a',
    { className: 'type-name', onClick: function (event) {
        return onClick(type, event);
      } },
    type.name
  );
}

// Renders a description

var Description = (function (_React$Component7) {
  _inherits(Description, _React$Component7);

  function Description() {
    _classCallCheck(this, Description);

    _React$Component7.apply(this, arguments);
  }

  Description.prototype.shouldComponentUpdate = function shouldComponentUpdate(nextProps) {
    return this.props.markdown !== nextProps.markdown;
  };

  Description.prototype.render = function render() {
    var markdown = this.props.markdown;
    if (!markdown) {
      return _react2['default'].createElement('div', null);
    }

    var html = _marked2['default'](markdown, { sanitize: true });
    return _react2['default'].createElement('div', {
      className: this.props.className,
      dangerouslySetInnerHTML: { __html: html }
    });
  };

  return Description;
})(_react2['default'].Component);