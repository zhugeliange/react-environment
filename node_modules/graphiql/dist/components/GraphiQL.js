/**
 *  Copyright (c) 2015, Facebook, Inc.
 *  All rights reserved.
 *
 *  This source code is licensed under the license found in the
 *  LICENSE-examples file in the root directory of this source tree.
 */

'use strict';

exports.__esModule = true;

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactDom = require('react-dom');

var _reactDom2 = _interopRequireDefault(_reactDom);

var _graphql = require('graphql');

var _ExecuteButton = require('./ExecuteButton');

var _ToolbarButton = require('./ToolbarButton');

var _QueryEditor = require('./QueryEditor');

var _VariableEditor = require('./VariableEditor');

var _ResultViewer = require('./ResultViewer');

var _DocExplorer = require('./DocExplorer');

var _utilityElementPosition = require('../utility/elementPosition');

var _utilityFillLeafs = require('../utility/fillLeafs');

var _utilityFind = require('../utility/find');

var _utilityFind2 = _interopRequireDefault(_utilityFind);

var _utilityIntrospectionQueries = require('../utility/introspectionQueries');

/**
 * GraphiQL
 *
 * This React component is responsible for rendering the GraphiQL editor.
 *
 * Props:
 *
 *   - fetcher: a function which accepts GraphQL-HTTP parameters and returns
 *     a Promise which resolves to the GraphQL parsed JSON response.
 *
 *   - schema: a GraphQLSchema instance or `null` if one is not to be used.
 *     If `undefined` is provided, GraphiQL will send an introspection query
 *     using the fetcher to produce a schema.
 *
 *   - query: an optional GraphQL string to use as the initial displayed query,
 *     if `undefined` is provided, the stored query or defaultQuery will
 *     be used.
 *
 *   - variables: an optional GraphQL string to use as the initial displayed
 *     query variables, if `undefined` is provided, the stored variables will
 *     be used.
 *
 *   - response: an optional JSON string to use as the initial displayed
 *     response. If not provided, no response will be initialy shown. You might
 *     provide this if illustrating the result of the initial query.
 *
 *   - storage: an instance of [Storage][] GraphiQL will use to persist state.
 *     Only `getItem` and `setItem` are called. Default: window.localStorage
 *
 *   - defaultQuery: an optional GraphQL string to use when no query is provided
 *     and no stored query exists from a previous session. If `undefined` is
 *     provided, GraphiQL will use its own default query.
 *
 *   - onEditQuery: an optional function which will be called when the Query
 *     editor changes. The argument to the function will be the query string.
 *
 *   - onEditVariables: an optional function which will be called when the Query
 *     varible editor changes. The argument to the function will be the
 *     variables string.
 *
 *   - getDefaultFieldNames: an optional function used to provide default fields
 *     to non-leaf fields which invalidly lack a selection set.
 *     Accepts a GraphQLType instance and returns an array of field names.
 *     If not provided, a default behavior will be used.
 *
 * Children:
 *
 *   - <GraphiQL.Logo> Replace the GraphiQL logo with your own.
 *
 *   - <GraphiQL.Toolbar> Add a custom toolbar above GraphiQL.
 *
 *   - <GraphiQL.ToolbarButton> Add a button to the toolbar above GraphiQL.
 *
 *   - <GraphiQL.Footer> Add a custom footer below GraphiQL Results.
 *
 *
 * [Storage]: https://developer.mozilla.org/en-US/docs/Web/API/Storage
 */

var GraphiQL = (function (_React$Component) {
  _inherits(GraphiQL, _React$Component);

  /**
   * Inspect the query, automatically filling in selection sets for non-leaf
   * fields which do not yet have them.
   *
   * @public
   */

  GraphiQL.prototype.autoCompleteLeafs = function autoCompleteLeafs() {
    var _fillLeafs = _utilityFillLeafs.fillLeafs(this.state.schema, this.state.query, this.props.getDefaultFieldNames);

    var insertions = _fillLeafs.insertions;
    var result = _fillLeafs.result;

    if (insertions && insertions.length > 0) {
      var editor = this.refs.queryEditor.getCodeMirror();
      editor.operation(function () {
        var cursor = editor.getCursor();
        var cursorIndex = editor.indexFromPos(cursor);
        editor.setValue(result);
        var added = 0;
        var markers = insertions.map(function (_ref) {
          var index = _ref.index;
          var string = _ref.string;
          return editor.markText(editor.posFromIndex(index + added), editor.posFromIndex(index + (added += string.length)), {
            className: 'autoInsertedLeaf',
            clearOnEnter: true,
            title: 'Automatically added leaf fields'
          });
        });
        setTimeout(function () {
          return markers.forEach(function (marker) {
            return marker.clear();
          });
        }, 7000);
        var newCursorIndex = cursorIndex;
        insertions.forEach(function (_ref2) {
          var index = _ref2.index;
          var string = _ref2.string;

          if (index < cursorIndex) {
            newCursorIndex += string.length;
          }
        });
        var newCursor = editor.posFromIndex(newCursorIndex);
        editor.setCursor(newCursor);
      });
    }

    return result;
  };

  // Lifecycle

  _createClass(GraphiQL, null, [{
    key: 'propTypes',
    value: {
      fetcher: _react.PropTypes.func.isRequired,
      schema: _react.PropTypes.instanceOf(_graphql.GraphQLSchema),
      query: _react.PropTypes.string,
      response: _react.PropTypes.string,
      storage: _react.PropTypes.shape({
        getItem: _react.PropTypes.func,
        setItem: _react.PropTypes.func
      }),
      defaultQuery: _react.PropTypes.string,
      variables: _react.PropTypes.string,
      onEditQuery: _react.PropTypes.func,
      onEditVariables: _react.PropTypes.func,
      getDefaultFieldNames: _react.PropTypes.func
    },
    enumerable: true
  }]);

  function GraphiQL(props) {
    var _this = this;

    _classCallCheck(this, GraphiQL);

    _React$Component.call(this, props);

    // Ensure props are correct

    this._runEditorQuery = function () {
      _this.setState({
        isWaitingForResponse: true,
        response: null
      });

      _this._editorQueryID++;
      var queryID = _this._editorQueryID;

      // Use the edited query after autoCompleteLeafs() runs or,
      // in case autoCompletion fails (the function returns undefined),
      // the current query from the editor.
      var editedQuery = _this.autoCompleteLeafs() || _this.state.query;

      _this._fetchQuery(editedQuery, _this.state.variables, function (result) {
        if (queryID === _this._editorQueryID) {
          _this.setState({
            isWaitingForResponse: false,
            response: JSON.stringify(result, null, 2)
          });
        }
      });
    };

    this._prettifyQuery = function () {
      var query = _graphql.print(_graphql.parse(_this.state.query));
      var editor = _this.refs.queryEditor.getCodeMirror();
      editor.setValue(query);
    };

    this._onEditQuery = function (value) {
      _this._storageSet('query', value);
      _this.setState({ query: value });
      if (_this.props.onEditQuery) {
        return _this.props.onEditQuery(value);
      }
    };

    this._onEditVariables = function (value) {
      _this._storageSet('variables', value);
      _this.setState({ variables: value });
      if (_this.props.onEditVariables) {
        _this.props.onEditVariables(value);
      }
    };

    this._onHintInformationRender = function (elem) {
      elem.addEventListener('click', _this._onClickHintInformation);

      var onRemoveFn;
      elem.addEventListener('DOMNodeRemoved', onRemoveFn = function () {
        elem.removeEventListener('DOMNodeRemoved', onRemoveFn);
        elem.removeEventListener('click', _this._onClickHintInformation);
      });
    };

    this._onClickHintInformation = function (event) {
      if (event.target.className === 'typeName') {
        var typeName = event.target.innerHTML;
        var schema = _this.state.schema;
        if (schema) {
          var type = schema.getType(typeName);
          if (type) {
            _this.setState({ docsOpen: true }, function () {
              _this.refs.docExplorer.showDoc(type);
            });
          }
        }
      }
    };

    this._onToggleDocs = function () {
      _this.setState({ docsOpen: !_this.state.docsOpen });
    };

    this._onResizeStart = function (downEvent) {
      if (!_this._didClickDragBar(downEvent)) {
        return;
      }

      downEvent.preventDefault();

      var offset = downEvent.clientX - _utilityElementPosition.getLeft(downEvent.target);

      var onMouseMove = function onMouseMove(moveEvent) {
        if (moveEvent.buttons === 0) {
          return onMouseUp();
        }

        var editorBar = _reactDom2['default'].findDOMNode(_this.refs.editorBar);
        var leftSize = moveEvent.clientX - _utilityElementPosition.getLeft(editorBar) - offset;
        var rightSize = editorBar.clientWidth - leftSize;
        _this.setState({ editorFlex: leftSize / rightSize });
      };

      var onMouseUp = (function (_onMouseUp) {
        function onMouseUp() {
          return _onMouseUp.apply(this, arguments);
        }

        onMouseUp.toString = function () {
          return _onMouseUp.toString();
        };

        return onMouseUp;
      })(function () {
        _this._storageSet('editorFlex', _this.state.editorFlex);

        document.removeEventListener('mousemove', onMouseMove);
        document.removeEventListener('mouseup', onMouseUp);
        onMouseMove = null;
        onMouseUp = null;
      });

      document.addEventListener('mousemove', onMouseMove);
      document.addEventListener('mouseup', onMouseUp);
    };

    this._onDocsResizeStart = function (downEvent) {
      downEvent.preventDefault();

      var hadWidth = _this.state.docsWidth;
      var offset = downEvent.clientX - _utilityElementPosition.getLeft(downEvent.target);

      var onMouseMove = function onMouseMove(moveEvent) {
        if (moveEvent.buttons === 0) {
          return onMouseUp();
        }

        var app = _reactDom2['default'].findDOMNode(_this);
        var cursorPos = moveEvent.clientX - _utilityElementPosition.getLeft(app) - offset;
        var docsSize = app.clientWidth - cursorPos;

        if (docsSize < 100) {
          _this.setState({ docsOpen: false });
        } else {
          _this.setState({
            docsOpen: true,
            docsWidth: Math.min(docsSize, 650)
          });
        }
      };

      var onMouseUp = (function (_onMouseUp2) {
        function onMouseUp() {
          return _onMouseUp2.apply(this, arguments);
        }

        onMouseUp.toString = function () {
          return _onMouseUp2.toString();
        };

        return onMouseUp;
      })(function () {
        if (_this.state.docsOpen) {
          _this._storageSet('docExplorerWidth', _this.state.docsWidth);
        } else {
          _this.setState({ docsWidth: hadWidth });
        }

        document.removeEventListener('mousemove', onMouseMove);
        document.removeEventListener('mouseup', onMouseUp);
        onMouseMove = null;
        onMouseUp = null;
      });

      document.addEventListener('mousemove', onMouseMove);
      document.addEventListener('mouseup', onMouseUp);
    };

    this._onVariableResizeStart = function (downEvent) {
      downEvent.preventDefault();

      var didMove = false;
      var wasOpen = _this.state.variableEditorOpen;
      var hadHeight = _this.state.variableEditorHeight;
      var offset = downEvent.clientY - _utilityElementPosition.getTop(downEvent.target);

      var onMouseMove = function onMouseMove(moveEvent) {
        if (moveEvent.buttons === 0) {
          return onMouseUp();
        }

        didMove = true;

        var editorBar = _reactDom2['default'].findDOMNode(_this.refs.editorBar);
        var topSize = moveEvent.clientY - _utilityElementPosition.getTop(editorBar) - offset;
        var bottomSize = editorBar.clientHeight - topSize;
        if (bottomSize < 60) {
          _this.setState({
            variableEditorOpen: false,
            variableEditorHeight: hadHeight
          });
        } else {
          _this.setState({
            variableEditorOpen: true,
            variableEditorHeight: bottomSize
          });
        }
      };

      var onMouseUp = (function (_onMouseUp3) {
        function onMouseUp() {
          return _onMouseUp3.apply(this, arguments);
        }

        onMouseUp.toString = function () {
          return _onMouseUp3.toString();
        };

        return onMouseUp;
      })(function () {
        if (didMove) {
          _this._storageSet('variableEditorHeight', _this.state.variableEditorHeight);
        } else {
          _this.setState({ variableEditorOpen: !wasOpen });
        }

        document.removeEventListener('mousemove', onMouseMove);
        document.removeEventListener('mouseup', onMouseUp);
        onMouseMove = null;
        onMouseUp = null;
      });

      document.addEventListener('mousemove', onMouseMove);
      document.addEventListener('mouseup', onMouseUp);
    };

    if (typeof props.fetcher !== 'function') {
      throw new TypeError('GraphiQL requires a fetcher function.');
    }

    // Cache the storage instance
    this._storage = props.storage || window.localStorage;

    // Determine the initial query to display.
    var query = props.query !== undefined ? props.query : this._storageGet('query') !== undefined ? this._storageGet('query') : props.defaultQuery !== undefined ? props.defaultQuery : defaultQuery;

    // Determine the initial variables to display.
    var variables = props.variables !== undefined ? props.variables : this._storageGet('variables');

    // Initialize state
    this.state = {
      schema: props.schema,
      query: query,
      variables: variables,
      response: props.response,
      editorFlex: this._storageGet('editorFlex') || 1,
      variableEditorOpen: Boolean(variables),
      variableEditorHeight: this._storageGet('variableEditorHeight') || 200,
      docsOpen: false,
      docsWidth: this._storageGet('docExplorerWidth') || 350,
      isWaitingForResponse: false
    };

    // Ensure only the last executed editor query is rendered.
    this._editorQueryID = 0;
  }

  // Configure the UI by providing this Component as a child of GraphiQL.

  GraphiQL.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {
    var nextSchema = this.state.schema;
    var nextQuery = this.state.query;
    var nextVariables = this.state.variables;
    var nextResponse = this.state.response;
    if (nextProps.schema !== undefined) {
      nextSchema = nextProps.schema;
    }
    if (nextProps.query !== undefined) {
      nextQuery = nextProps.query;
    }
    if (nextProps.variables !== undefined) {
      nextVariables = nextProps.variables;
    }
    if (nextProps.response !== undefined) {
      nextResponse = nextProps.response;
    }
    this.setState({
      schema: nextSchema,
      query: nextQuery,
      variables: nextVariables,
      response: nextResponse
    });
  };

  GraphiQL.prototype.componentDidMount = function componentDidMount() {
    var _this2 = this;

    // If there is no schema provided via props, fetch one using introspection.
    if (this.state.schema !== undefined) {
      return;
    }

    var fetcher = this.props.fetcher;

    // Try the stock introspection query first, falling back on the
    // sans-subscriptions query for services which do not yet support it.
    fetcher({ query: _utilityIntrospectionQueries.introspectionQuery })['catch'](function () {
      return fetcher({ query: _utilityIntrospectionQueries.introspectionQuerySansSubscriptions });
    }).then(function (result) {
      // If a schema was provided while this fetch was underway, then
      // satisfy the race condition by respecting the already
      // provided schema.
      if (_this2.state.schema !== undefined) {
        return;
      }

      if (result.data) {
        _this2.setState({ schema: _graphql.buildClientSchema(result.data) });
      } else {
        var responseString = typeof result === 'string' ? result : JSON.stringify(result, null, 2);
        _this2.setState({ response: responseString });
      }
    })['catch'](function (error) {
      _this2.setState({ response: error && (error.stack || String(error)) });
    });
  };

  GraphiQL.prototype.componentDidUpdate = function componentDidUpdate(prevProps, prevState) {
    // When UI-altering state changes, simulate a window resize event so all
    // CodeMirror instances become properly rendered.
    if (this.state.variableEditorOpen !== prevState.variableEditorOpen || this.state.variableEditorHeight !== prevState.variableEditorHeight) {
      window.dispatchEvent(new Event('resize'));
    }
  };

  GraphiQL.prototype.render = function render() {
    var children = [];
    _react2['default'].Children.forEach(this.props.children, function (child) {
      children.push(child);
    });

    var logo = _utilityFind2['default'](children, function (child) {
      return child.type === GraphiQL.Logo;
    }) || _react2['default'].createElement(GraphiQL.Logo, null);

    var toolbar = _utilityFind2['default'](children, function (child) {
      return child.type === GraphiQL.Toolbar;
    }) || _react2['default'].createElement(
      GraphiQL.Toolbar,
      null,
      _react2['default'].createElement(GraphiQL.ToolbarButton, {
        onClick: this._prettifyQuery,
        title: 'Prettify Query',
        label: 'Prettify'
      })
    );

    var footer = _utilityFind2['default'](children, function (child) {
      return child.type === GraphiQL.Footer;
    });

    var queryWrapStyle = {
      WebkitFlex: this.state.editorFlex,
      flex: this.state.editorFlex
    };

    var docWrapStyle = {
      display: this.state.docsOpen ? 'block' : 'none',
      width: this.state.docsWidth
    };

    var variableOpen = this.state.variableEditorOpen;
    var variableStyle = {
      height: variableOpen ? this.state.variableEditorHeight : null
    };

    return _react2['default'].createElement(
      'div',
      { id: 'graphiql-container' },
      _react2['default'].createElement(
        'div',
        { className: 'editorWrap' },
        _react2['default'].createElement(
          'div',
          { className: 'topBarWrap' },
          _react2['default'].createElement(
            'div',
            { className: 'topBar' },
            logo,
            _react2['default'].createElement(_ExecuteButton.ExecuteButton, { onClick: this._runEditorQuery }),
            toolbar
          ),
          !this.state.docsOpen && _react2['default'].createElement(
            'button',
            { className: 'docExplorerShow', onClick: this._onToggleDocs },
            'Docs'
          )
        ),
        _react2['default'].createElement(
          'div',
          {
            ref: 'editorBar',
            className: 'editorBar',
            onMouseDown: this._onResizeStart
          },
          _react2['default'].createElement(
            'div',
            { className: 'queryWrap', style: queryWrapStyle },
            _react2['default'].createElement(_QueryEditor.QueryEditor, {
              ref: 'queryEditor',
              schema: this.state.schema,
              value: this.state.query,
              onEdit: this._onEditQuery,
              onHintInformationRender: this._onHintInformationRender
            }),
            _react2['default'].createElement(
              'div',
              { className: 'variable-editor', style: variableStyle },
              _react2['default'].createElement(
                'div',
                {
                  className: 'variable-editor-title',
                  style: { cursor: variableOpen ? 'row-resize' : 'n-resize' },
                  onMouseDown: this._onVariableResizeStart
                },
                'Query Variables'
              ),
              _react2['default'].createElement(_VariableEditor.VariableEditor, {
                value: this.state.variables,
                onEdit: this._onEditVariables
              })
            )
          ),
          _react2['default'].createElement(
            'div',
            { className: 'resultWrap' },
            this.state.isWaitingForResponse && _react2['default'].createElement(
              'div',
              { className: 'spinner-container' },
              _react2['default'].createElement('div', { className: 'spinner' })
            ),
            _react2['default'].createElement(_ResultViewer.ResultViewer, { ref: 'result', value: this.state.response }),
            footer
          )
        )
      ),
      _react2['default'].createElement(
        'div',
        { className: 'docExplorerWrap', style: docWrapStyle },
        _react2['default'].createElement('div', {
          className: 'docExplorerResizer',
          onMouseDown: this._onDocsResizeStart
        }),
        _react2['default'].createElement(
          _DocExplorer.DocExplorer,
          { ref: 'docExplorer', schema: this.state.schema },
          _react2['default'].createElement(
            'div',
            { className: 'docExplorerHide', onClick: this._onToggleDocs },
            '✕'
          )
        )
      )
    );
  };

  // Private methods

  GraphiQL.prototype._storageGet = function _storageGet(name) {
    return this._storage.getItem('graphiql:' + name);
  };

  GraphiQL.prototype._storageSet = function _storageSet(name, value) {
    this._storage.setItem('graphiql:' + name, value);
  };

  GraphiQL.prototype._fetchQuery = function _fetchQuery(query, variables, cb) {
    var _this3 = this;

    this.props.fetcher({ query: query, variables: variables }).then(cb)['catch'](function (error) {
      _this3.setState({
        isWaitingForResponse: false,
        response: error && (error.stack || String(error))
      });
    });
  };

  GraphiQL.prototype._didClickDragBar = function _didClickDragBar(event) {
    // Only for primary unmodified clicks
    if (event.button !== 0 || event.ctrlKey) {
      return false;
    }
    var target = event.target;
    // We use codemirror's gutter as the drag bar.
    if (target.className.indexOf('CodeMirror-gutter') !== 0) {
      return false;
    }
    // Specifically the result window's drag bar.
    var resultWindow = _reactDom2['default'].findDOMNode(this.refs.result);
    while (target) {
      if (target === resultWindow) {
        return true;
      }
      target = target.parentNode;
    }
    return false;
  };

  return GraphiQL;
})(_react2['default'].Component);

exports.GraphiQL = GraphiQL;
GraphiQL.Logo = (function (_React$Component2) {
  _inherits(GraphiQLLogo, _React$Component2);

  function GraphiQLLogo() {
    _classCallCheck(this, GraphiQLLogo);

    _React$Component2.apply(this, arguments);
  }

  GraphiQLLogo.prototype.render = function render() {
    return _react2['default'].createElement(
      'div',
      { className: 'title' },
      this.props.children || _react2['default'].createElement(
        'span',
        null,
        'Graph',
        _react2['default'].createElement(
          'em',
          null,
          'i'
        ),
        'QL'
      )
    );
  };

  return GraphiQLLogo;
})(_react2['default'].Component);

// Configure the UI by providing this Component as a child of GraphiQL.
GraphiQL.Toolbar = (function (_React$Component3) {
  _inherits(GraphiQLToolbar, _React$Component3);

  function GraphiQLToolbar() {
    _classCallCheck(this, GraphiQLToolbar);

    _React$Component3.apply(this, arguments);
  }

  GraphiQLToolbar.prototype.render = function render() {
    return _react2['default'].createElement(
      'div',
      { className: 'toolbar' },
      this.props.children
    );
  };

  return GraphiQLToolbar;
})(_react2['default'].Component);

// Add a buttom to the Toolbar.
GraphiQL.ToolbarButton = _ToolbarButton.ToolbarButton;

// Configure the UI by providing this Component as a child of GraphiQL.
GraphiQL.Footer = (function (_React$Component4) {
  _inherits(GraphiQLFooter, _React$Component4);

  function GraphiQLFooter() {
    _classCallCheck(this, GraphiQLFooter);

    _React$Component4.apply(this, arguments);
  }

  GraphiQLFooter.prototype.render = function render() {
    return _react2['default'].createElement(
      'div',
      { className: 'footer' },
      this.props.children
    );
  };

  return GraphiQLFooter;
})(_react2['default'].Component);

var defaultQuery = '# Welcome to GraphiQL\n#\n# GraphiQL is an in-browser IDE for writing, validating, and\n# testing GraphQL queries.\n#\n# Type queries into this side of the screen, and you will\n# see intelligent typeaheads aware of the current GraphQL type schema and\n# live syntax and validation errors highlighted within the text.\n#\n# To bring up the auto-complete at any point, just press Ctrl-Space.\n#\n# Press the run button above, or Cmd-Enter to execute the query, and the result\n# will appear in the pane to the right.\n\n';