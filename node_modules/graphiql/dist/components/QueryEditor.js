/**
 *  Copyright (c) 2015, Facebook, Inc.
 *  All rights reserved.
 *
 *  This source code is licensed under the license found in the
 *  LICENSE-examples file in the root directory of this source tree.
 */

'use strict';

exports.__esModule = true;

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactDom = require('react-dom');

var _reactDom2 = _interopRequireDefault(_reactDom);

var _marked = require('marked');

var _marked2 = _interopRequireDefault(_marked);

var _codemirror = require('codemirror');

var _codemirror2 = _interopRequireDefault(_codemirror);

var _graphql = require('graphql');

require('codemirror/addon/hint/show-hint');

require('codemirror/addon/comment/comment');

require('codemirror/addon/edit/matchbrackets');

require('codemirror/addon/edit/closebrackets');

require('codemirror/addon/fold/foldgutter');

require('codemirror/addon/fold/brace-fold');

require('codemirror/addon/lint/lint');

require('codemirror/keymap/sublime');

require('codemirror-graphql/hint');

require('codemirror-graphql/lint');

require('codemirror-graphql/mode');

/**
 * QueryEditor
 *
 * Maintains an instance of CodeMirror responsible for editing a GraphQL query.
 *
 * Props:
 *
 *   - schema: A GraphQLSchema instance enabling editor linting and hinting.
 *   - value: The text of the editor.
 *   - onEdit: A function called when the editor changes, given the edited text.
 *
 */

var QueryEditor = (function (_React$Component) {
  _inherits(QueryEditor, _React$Component);

  _createClass(QueryEditor, null, [{
    key: 'propTypes',
    value: {
      schema: _react.PropTypes.instanceOf(_graphql.GraphQLSchema),
      value: _react.PropTypes.string,
      onEdit: _react.PropTypes.func
    },
    enumerable: true
  }]);

  function QueryEditor(props) {
    var _this = this;

    _classCallCheck(this, QueryEditor);

    _React$Component.call(this);

    // Keep a cached version of the value, this cache will be updated when the
    // editor is updated, which can later be used to protect the editor from
    // unnecessary updates during the update lifecycle.

    this._onKeyUp = function (cm, event) {
      var code = event.keyCode;
      if (code >= 65 && code <= 90 || // letters
      !event.shiftKey && code >= 48 && code <= 57 || // numbers
      event.shiftKey && code === 189 || // underscore
      event.shiftKey && code === 50 || // @
      event.shiftKey && code === 57 // (
      ) {
          _this.editor.execCommand('autocomplete');
        }
    };

    this._onEdit = function () {
      if (!_this.ignoreChangeEvent) {
        _this.cachedValue = _this.editor.getValue();
        if (_this.props.onEdit) {
          _this.props.onEdit(_this.cachedValue);
        }
      }
    };

    this._onHasCompletion = function (cm, data) {
      var wrapper;
      var information;

      // When a hint result is selected, we touch the UI.
      _codemirror2['default'].on(data, 'select', function (ctx, el) {
        // Only the first time (usually when the hint UI is first displayed)
        // do we create the wrapping node.
        if (!wrapper) {
          // Wrap the existing hint UI, so we have a place to put information.
          var hintsUl = el.parentNode;
          var container = hintsUl.parentNode;
          wrapper = document.createElement('div');
          container.appendChild(wrapper);

          // CodeMirror vertically inverts the hint UI if there is not enough
          // space below the cursor. Since this modified UI appends to the bottom
          // of CodeMirror's existing UI, it could cover the cursor. This adjusts
          // the positioning of the hint UI to accomodate.
          var top = hintsUl.style.top;
          var bottom = '';
          var cursorTop = cm.cursorCoords().top;
          if (parseInt(top, 10) < cursorTop) {
            top = '';
            bottom = window.innerHeight - cursorTop + 3 + 'px';
          }

          // Style the wrapper, remove positioning from hints. Note that usage
          // of this option will need to specify CSS to remove some styles from
          // the existing hint UI.
          wrapper.className = 'CodeMirror-hints-wrapper';
          wrapper.style.left = hintsUl.style.left;
          wrapper.style.top = top;
          wrapper.style.bottom = bottom;
          hintsUl.style.left = '';
          hintsUl.style.top = '';

          // This "information" node will contain the additional info about the
          // highlighted typeahead option.
          information = document.createElement('div');
          information.className = 'CodeMirror-hint-information';
          if (bottom) {
            wrapper.appendChild(information);
            wrapper.appendChild(hintsUl);
          } else {
            wrapper.appendChild(hintsUl);
            wrapper.appendChild(information);
          }

          // When CodeMirror attempts to remove the hint UI, we detect that it was
          // removed from our wrapper and in turn remove the wrapper from the
          // original container.
          var onRemoveFn;
          wrapper.addEventListener('DOMNodeRemoved', onRemoveFn = function (event) {
            if (event.target === hintsUl) {
              wrapper.removeEventListener('DOMNodeRemoved', onRemoveFn);
              wrapper.parentNode.removeChild(wrapper);
              wrapper = null;
              information = null;
              onRemoveFn = null;
            }
          });
        }

        // Now that the UI has been set up, add info to information.
        var description = ctx.description ? _marked2['default'](ctx.description, { smartypants: true }) : 'Self descriptive.';
        var type = ctx.type ? '<span class="infoType">' + renderType(ctx.type) + '</span>' : '';

        information.innerHTML = '<div class="content">' + (description.slice(0, 3) === '<p>' ? '<p>' + type + description.slice(3) : type + description) + '</div>';

        // Additional rendering?
        var onHintInformationRender = _this.props.onHintInformationRender;
        if (onHintInformationRender) {
          onHintInformationRender(information);
        }
      });
    };

    this.cachedValue = props.value || '';
  }

  /**
   * Public API for retrieving the CodeMirror instance from this
   * React component.
   */

  QueryEditor.prototype.getCodeMirror = function getCodeMirror() {
    return this.editor;
  };

  QueryEditor.prototype.componentDidMount = function componentDidMount() {
    var _this2 = this;

    this.editor = _codemirror2['default'](_reactDom2['default'].findDOMNode(this), {
      value: this.props.value || '',
      lineNumbers: true,
      tabSize: 2,
      mode: 'graphql',
      theme: 'graphiql',
      keyMap: 'sublime',
      autoCloseBrackets: true,
      matchBrackets: true,
      showCursorWhenSelecting: true,
      foldGutter: {
        minFoldSize: 4
      },
      lint: {
        schema: this.props.schema
      },
      hintOptions: {
        schema: this.props.schema,
        closeOnUnfocus: false,
        completeSingle: false
      },
      gutters: ['CodeMirror-linenumbers', 'CodeMirror-foldgutter'],
      extraKeys: {
        'Cmd-Space': function CmdSpace() {
          return _this2.editor.showHint({ completeSingle: true });
        },
        'Ctrl-Space': function CtrlSpace() {
          return _this2.editor.showHint({ completeSingle: true });
        },
        'Alt-Space': function AltSpace() {
          return _this2.editor.showHint({ completeSingle: true });
        },
        'Shift-Space': function ShiftSpace() {
          return _this2.editor.showHint({ completeSingle: true });
        },

        // Editor improvements
        'Ctrl-Left': 'goSubwordLeft',
        'Ctrl-Right': 'goSubwordRight',
        'Alt-Left': 'goGroupLeft',
        'Alt-Right': 'goGroupRight'
      }
    });

    this.editor.on('change', this._onEdit);
    this.editor.on('keyup', this._onKeyUp);
    this.editor.on('hasCompletion', this._onHasCompletion);
  };

  QueryEditor.prototype.componentWillUnmount = function componentWillUnmount() {
    this.editor.off('change', this._onEdit);
    this.editor.off('keyup', this._onKeyUp);
    this.editor.off('hasCompletion', this._onHasCompletion);
    this.editor = null;
  };

  QueryEditor.prototype.componentDidUpdate = function componentDidUpdate(prevProps) {
    // Ensure the changes caused by this update are not interpretted as
    // user-input changes which could otherwise result in an infinite
    // event loop.
    this.ignoreChangeEvent = true;
    if (this.props.schema !== prevProps.schema) {
      this.editor.options.lint.schema = this.props.schema;
      this.editor.options.hintOptions.schema = this.props.schema;
      _codemirror2['default'].signal(this.editor, 'change', this.editor);
    }
    if (this.props.value !== prevProps.value && this.props.value !== this.cachedValue) {
      this.cachedValue = this.props.value;
      this.editor.setValue(this.props.value);
    }
    this.ignoreChangeEvent = false;
  };

  QueryEditor.prototype.render = function render() {
    return _react2['default'].createElement('div', { className: 'query-editor' });
  };

  return QueryEditor;
})(_react2['default'].Component);

exports.QueryEditor = QueryEditor;

function renderType(type) {
  if (type instanceof _graphql.GraphQLNonNull) {
    return renderType(type.ofType) + '!';
  }
  if (type instanceof _graphql.GraphQLList) {
    return '[' + renderType(type.ofType) + ']';
  }
  return '<a class="typeName">' + type.name + '</a>';
}

/**
 * Render a custom UI for CodeMirror's hint which includes additional info
 * about the type and description for the selected context.
 */